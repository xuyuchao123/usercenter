<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xyc.userc.dao.PcRoleMapper">

    <resultMap id="BaseResultMap" type="com.xyc.userc.entity.PcRole">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="role_name" jdbcType="VARCHAR" property="roleName" />
        <result column="is_deleted" jdbcType="TINYINT" property="isDeleted" />
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
        <result column="user_create" jdbcType="BIGINT" property="userCreate" />
        <result column="user_modified" jdbcType="BIGINT" property="userModified" />
    </resultMap>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from pc_role
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.xyc.userc.entity.PcRole">
        <selectKey keyProperty="id" order="BEFORE" resultType="int">
            SELECT PC_ROLE_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        insert into pc_role (id, role_name, permission_id,
        application_id, is_deleted, gmt_create,
        gmt_modified, user_create, user_modified
        )
        values (#{id,jdbcType=BIGINT}, #{roleName,jdbcType=VARCHAR}, #{permissionId,jdbcType=BIGINT},
        #{applicationId,jdbcType=BIGINT}, #{isDeleted,jdbcType=TINYINT}, #{gmtCreate,jdbcType=TIMESTAMP},
        #{gmtModified,jdbcType=TIMESTAMP}, #{userCreate,jdbcType=BIGINT}, #{userModified,jdbcType=BIGINT}
        )
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.xyc.userc.entity.PcRole">
        update pc_role
        set role_name = #{roleName,jdbcType=VARCHAR},
        permission_id = #{permissionId,jdbcType=BIGINT},
        application_id = #{applicationId,jdbcType=BIGINT},
        is_deleted = #{isDeleted,jdbcType=TINYINT},
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
        user_create = #{userCreate,jdbcType=BIGINT},
        user_modified = #{userModified,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select id, role_name, permission_id, application_id, is_deleted, gmt_create, gmt_modified,
        user_create, user_modified
        from pc_role
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
        select id, role_name, permission_id, application_id, is_deleted, gmt_create, gmt_modified,
        user_create, user_modified
        from pc_role
    </select>

    <resultMap id="selectByUserIdMap" extends="BaseResultMap"  type="com.xyc.userc.entity.PcRole">
        <association column="{id=permission_id}" fetchType="eager" property="permission" select="com.xyc.userc.dao.PermissionMapper.selectByPrimaryKey" />
        <association column="{id=application_id}" fetchType="eager" property="application" select="com.xyc.userc.dao.ApplicationMapper.selectByPrimaryKey" />
    </resultMap>

    <select id="selectByUserId" resultMap="selectByUserIdMap">
        select r.id, r.role_name, r.permission_id, r.application_id, r.is_deleted,r.gmt_create, r.gmt_modified,
        r.user_create, r.user_modified
        from pc_user_role ur
        left join pc_role r on ur.role_id = r.id
        where ur.user_id = #{userId}
    </select>

    <select id="selectIdsByPath" resultType="java.lang.Integer">
        select sr.id from
        pc_role sr
        left join pc_permission_requestpath spr on sr.permission_id = spr.permission_id
        left join pc_requestpath srp on spr.requestpath_id = srp.id where srp.url like concat(#{url},'%')
    </select>

</mapper>